#include <opencv2/imgcodecs.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/imgproc.hpp>
#include<iostream>
using namespace std;
using namespace cv;
Mat imgHSV,mask;
int hmin = 0, smin = 0, vmin = 0;
int hmax = 179, smax = 255, vmax = 255;
void getContours(Mat imgDila, Mat img)
{
	vector<vector<Point>>contours;
	vector<Vec4i>hierarchy;
 
	findContours(imgDila, contours, hierarchy, RETR_EXTERNAL, CHAIN_APPROX_SIMPLE);
	for (int i = 0; i < contours.size(); i++)
	{
		int area = contourArea(contours[i]);
		if(area>25)
			drawContours(img, contours, i, Scalar(255, 0, 255), 2);
 
	}
 
}
 
void main()
{
	
                namedWindow("Trackbars", (640, 200));
		createTrackbar("HUE MIN", "Trackbars", &hmin, 179);
		createTrackbar("HUE MAX", "Trackbars", &hmax, 179);
		createTrackbar("sau MIN", "Trackbars", &smin, 255);
		createTrackbar("sau Max", "Trackbars", &smax, 255);
		createTrackbar("Val MIN", "Trackbars", &vmin, 255);
		createTrackbar("val MAX", "Trackbars", &vmax, 255);
		
		VideoCapture cap(0);
 
		while (true)
		{
			Mat img;
			Mat imgGray, imgBlur, imgCanny, imgDila;
			cap.read(img);
			cvtColor(img, imgHSV, COLOR_BGR2HSV);
			Scalar lower(hmin, smin, vmin);
			Scalar upper(hmax, smax, vmax);
			inRange(imgHSV, lower, upper, mask);
			GaussianBlur(mask, imgBlur, Size(3, 3), 3, 0);
			Canny(imgBlur, imgCanny, 50, 150);
			Mat kernel = getStructuringElement(MORPH_RECT, Size(3, 3));
			dilate(imgCanny, imgDila, kernel);
                        getContours(imgDila, img);
			imshow("image", img);
			imshow("image HSV", imgHSV);
			imshow("img mask ", mask);
 
			
			
			waitKey(1);
		}
   }
